/** @author Nicolas Boeckh & Sofia Delijaj */
#include <stdlib.h>
#include <stdio.h>
#include <unistd.h>
#include <string.h>

#include <sys/stat.h>
#include <sys/types.h>
#include <errno.h>
#include <dirent.h>

#include "directoryUtilities.h"
#include "directoryRunner.h"

/** Liberates the memory taken by the tree (DFS recursive)
 * @param node The node to be liberated (viva la liberdad !)
 */ 
void freeNode(Object *node) {
    node->children[0] = NULL;   // Set the reference to parent to NULL (otherwise Bob Ross won't have any little happy trees).
    for (int i = 1; i < node->numberOfChildren + 1; i++) {
        freeNode((Object*) node->children[i]);      // Free the children, recursively.
    }
    free(node->children[0]);    // Liberate the ptr containing NULL
    free(node->children);       // Liberate the table of children
    free(node);     // Liberate the struct.
    node = NULL;    // Double tap, just to be sure.
}

/** Helper function that checks whether the current obj has already appeared previously (recursively (big whoop))
 * @param parent The parent of the node, escapes if null (ie. parent is the root node)
 * @param inode The (static) inode of the tested file.
*/
int rippleCycleCheckUpwards(Object *parent, __ino_t inode) {
    if (parent) // If the parent isn't NULL (ie. this node isn't the root node).
        if (parent->info.st_ino == inode)   // If the inodes match.
            return 1;
        else 
            return rippleCycleCheckUpwards((Object*) parent->children[0], inode);   // Check the same for this parent's parent (recursion... again...)
    else 
        return 0;   // Gandalf : "I've no recollection of this place"
}

/** Gets all of the subfiles/folders of { @param path }
 * @param path          The path of the node
 * @param statBuffer    The stat structure associated with the file at { @param path };
 * @param files         An output array of filenames representing the subfiles/folders at the location described by { @param path }
 * @param numberOfFiles A buffer that will contain the number of children "assigned"
 */
void getChildren(const char *path, struct stat* statBuffer, char *files[THEORETICAL_MAX_PATH_LENGTH], int *numberOfFiles) {
    int count = 0;  // Count the children (sounds worse than it is).
    struct dirent *currentDir;

    if (lstat(path, statBuffer) == 0 && S_ISDIR(statBuffer->st_mode)) { // If it's a dir, then it might have children, otherwise... nope.
        DIR *folder = opendir(path); 
        if (access(path, F_OK) != -1) { // If the program can access the object at the end of the path.
            if (folder) // Check innulability (yes I just invented a word)
                while ((currentDir = readdir(folder))) {    // If children can be read.
                    if (strcmp(currentDir->d_name, ".") && strcmp(currentDir->d_name, "..")) { // And those children don't loop back to self or parent.s
                        files[count] = (char*) malloc(THEORETICAL_MAX_PATH_LENGTH); // Add it to the children's addresses (getting weird looks from the people at the FBI)
                        snprintf(files[count], THEORETICAL_MAX_PATH_LENGTH, "%s%s", currentDir->d_name, "\0");  // Is a basename.
                        count++;
                    }
                }
            free(currentDir);
        }
        closedir(folder);
    } else if (errno < 0)
        printf("ERROR %d\n", errno);

    *numberOfFiles = count; // Keep track of the number of children.
}

/** Create an Object (struct defined at ./directoryUtilities.h).
 * @param filename  The path that serves as basis.
 * @param parent    The parent Object.
 */
Object * createNode(const char *filename, Object *parent) {
    Object *node = malloc(sizeof(Object));

    char *files[THEORETICAL_MAX_PATH_LENGTH];
    char *realDestination = malloc(THEORETICAL_MAX_PATH_LENGTH);
    char *res = realpath(filename, realDestination);

    strncpy(node->path[0], filename, THEORETICAL_MAX_PATH_LENGTH - 1);  // Store the relpath at path[0]
    if (res) {
        strncpy(node->path[1], realDestination, THEORETICAL_MAX_PATH_LENGTH - 1);   // Store the realpath at path[1]
        strncat(node->path[1], "\0", 1);
    }
    free(realDestination);
    
    struct stat *info = malloc(sizeof(struct stat));
    lstat(filename, info); // Store the information from the file/any at the end of this path
    if (S_ISLNK(info->st_mode) == 1) {  // If it's a link
        getChildren(node->path[1], &node->info, files, &node->numberOfChildren); // Get children at realpath
        node->symlink = 1;  // Helper
    } else {
        getChildren(node->path[0], &node->info, files, &node->numberOfChildren); // Get children at relpath
        node->symlink = 0;
    }
    free(info);

    if (parent && parent->symlink == 1)  // If the parent is a symlink then this is a symlink.
        node->symlink = 1;
    
    node->children = malloc((1 + node->numberOfChildren) * sizeof(Object*)); // children[0] is a reference to the parent.
    node->children[0] = (struct Object*) parent; // Because checking cyclic reference is easier when we have something to reference it with.

    if (rippleCycleCheckUpwards((Object*) parent, node->info.st_ino) == 1) {    // If a cycle exists
        for (int i = 0; i < node->numberOfChildren; i++)    // Break it by removing all children
            free(files[i]);
        node->numberOfChildren = 0;
        node->cyclic = 1;   // For QOL printouts
    } else node->cyclic = 0;

    for (int i = 0; i < node->numberOfChildren; i++) {  // Create the child nodes (recursively...)
        char nextfile[THEORETICAL_MAX_PATH_LENGTH];
        snprintf(nextfile, THEORETICAL_MAX_PATH_LENGTH - 1, "%s/%s", filename, files[i]);   // Generate the new path.
        
        if (S_ISDIR(node->info.st_mode) || S_ISLNK(node->info.st_mode)) {   // If the node is a file then we don't need to create it's children.
            node->children[i + 1] = (struct Object*) createNode(nextfile, node);
        }
        free(files[i]);
    }
    return node;
}
